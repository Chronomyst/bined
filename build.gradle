version = '0.1.2-SNAPSHOT'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "at.bxm.gradleplugins:gradle-svntools-plugin:latest.integration"
    }
}

['base', 'distribution', 'maven', 'at.bxm.svntools'].each {
    apply plugin: it
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '2.14'
}

task('cleanDeps') << {
    println "Deleting temporary dependency modules"
    File depsCheckFile = rootProject.file("deps/dependency.txt")
    if (depsCheckFile.exists()) {
        File depsDir = rootProject.file("deps")
        depsDir.listFiles().each() { childFile ->
            if (childFile.name != '_placeholder' && childFile.isDirectory()) {
                project.delete(childFile)
            }
        }
    } else {
        throw new Exception('Invalid dependency path')
    }
}

if (gradle.startParameter.taskNames.contains("clean") && !project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
    cleanDeps.execute()
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

def createSvnDownloadTask(def moduleName, def svnUrlValue, def targetDirValue) {
    return tasks.create("svnDownload${moduleName}", at.bxm.gradleplugins.svntools.tasks.SvnExport) {
        svnUrl = svnUrlValue
        targetDir = targetDirValue
    }
}

if (file('deps/_placeholder').exists()) {
    // Perform restart for new dependency handling
    def depsLevel
    if (project.gradle.startParameter.projectProperties.containsKey('moduleDep')) {
        depsLevel = project.gradle.startParameter.projectProperties['moduleDep'] + 1
    } else {
        depsLevel = 1
    }
    def artefactBuild = project.tasks.create([name: "depsRebuild_${depsLevel}", type: GradleBuild])
    artefactBuild.buildFile = project.file('build.gradle')
    artefactBuild.tasks = project.gradle.startParameter.taskNames

    def artefactProjectProperties = artefactBuild.startParameter.projectProperties
    def currentProjectProperties = project.gradle.startParameter.projectProperties
    artefactProjectProperties << currentProjectProperties
    artefactProjectProperties << ['moduleDep': depsLevel]

    // Terminate currently invalid tasks
    // TODO: Fix support for other tasks like distZip
    subprojects.each { subproject ->
        if (subproject.tasks.findByPath('assemble') != null) {
            subproject.tasks['assemble'].setDependsOn([])
        }
    }
    if (project.tasks.findByPath('assemble') != null) {
        project.tasks['assemble'].setDependsOn([])
    }

    artefactBuild.execute()
}

distZip.dependsOn project(':tools:deltahex-editor').tasks['launch4j']

if (!project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
    distZip {
        archiveName project(':tools:deltahex-editor').name + '-' + version + '.zip'
    }

    distributions {
        main {
            contents {
                duplicatesStrategy = 'exclude'
                from project(':tools:deltahex-editor').jar

                from project.rootDir
                include 'LICENSE-2.0.txt'
                include 'changes.txt'

                from 'src/dist'
                include 'readme.txt'
                include 'deltahex-editor.sh'
//                include 'deltahex-editor.bat'
                include 'plugins/*'
                
                from project(':tools:deltahex-editor').projectDir.absolutePath + '/build/launch4j'
                include "DeltaHexEditor.exe"

                //            into('lib') {
                //                from 'lib'
                //            }

                into('') {
                    from project(':tools:deltahex-editor').jar.archivePath
                    include '*'
                    rename { filename -> project(':tools:deltahex-editor').name + ".jar" }
                }

                project(':tools:deltahex-editor').plugins.withType(JavaPlugin) {
                    into('lib') {
                        from project(':tools:deltahex-editor').configurations.runtime
                        include '*'
                    }
                }

                //            into('doc') {
                //                from 'doc'
                //                include '**'
                //            }
                //            into('resources') {
                //                from 'resources'
                //                include '**'
                //                exclude 'private'
                //            }
            }
        }
    }
}

